#!/bin/bash
VERSION=0.1
#########################################################################################
#
#         Contributors are kindly requested to add their name to this variable
#
CONTRIBUTORS="
"
#
#########################################################################################


function checkFile(){
  svn cat "$FILE_TO_DOWNLOAD" > /tmp/"$FILE_TO_SAVE" 2>/dev/null
  if [ ! -s /tmp/"$FILE_TO_SAVE" ];then
    rm /tmp/"$FILE_TO_SAVE"
		echo "File \"$FILE_ONLY\" does NOT exist in $(echo $BRANCH | sed 's|branches/||')"
	else
    if [ -z "$KEEP_DOWNLOAD" ];then
			echo "File \"$FILE_ONLY\" exists in $(echo $BRANCH | sed 's|branches/||')"
		else
			mv /tmp/"$FILE_TO_SAVE" "$FILE_TO_SAVE" 2>/dev/null || {
				echo "File saved as: /tmp/"$FILE_TO_SAVE""
			} && {
				echo "File saved as: "$FILE_TO_SAVE""
			}
		fi
	fi
}

function langExists(){
  return $(svn cat "$SVN"/subdirs | sed "/^"$LANGUAGE"$/!d" | wc -l)
}

function credit(){
if [ -n "$CONTRIBUTORS" ];then
  echo "Contributors:"
  echo "$CONTRIBUTORS" | sed 's|^|  |'
fi
}

function version(){
echo "$(basename "$0") v $VERSION - A tool to gather KDE translations
(C) 2010, Spiros Georgaras <sng@hellug.gr>
"
}

function usage(){
echo "Usage: $(basename "$0") [OPTIONS]

Available options are:
  p [PROGRAM_NAME]  The name of the program in KDE SVN
  m [MODULE_NAME]   The KDE SVN module the program belongs to
  s                 The program is in STABLE branch. Default is TRUNK
* Check mode
  l [LANGUAGE]      Check whether the po file for the LANGUAGE exists
  t                 Download the template (pot) file instead of the po file
  d                 Download the doc (index.docbook) file instead
                    of the po file
  a                 Check ALL of the above files
  e                 Check ALL and extra (docmessages) files 
  k                 Keep the downloaded file (don't delete it after
                    reporting its existence)
* Common options
  v                 Display version info and exit
  c                 Display credit info and exit
  h                 Display this screen and exit
"

}

function helpsc(){
echo "This script is meant to help KDE software developers (having programs in
trunk branch of KDE SVN) to automate some trivial tasks, such as gathering
the po files and the documentation for all languages, check the existence
of a certain file etc.

It works in two modes: download and check mode.

* Download mode

The minimum parameters needed to execute the script is the program name
(option -p), and the KDE SVN module the program belongs to (option -m). When
these two options are provided, the script will insert download mode, and
will create the following directory structure under the current path:

<Current Path>
  |-[Program name]-from-svn
      |- po
      |- doc
          |- [lang1]
          |- [lang2]
          |- ...

The contents of the po and doc subdirectories are obvious. It should be
noted that the documentation file (index.docbook) will be downloaded, only
if the corresponding po file exists.

In case a program is under stable branch, option -s can be used.

* Check mode

When providing the language code (option -l), the svript enters check mode.
In this mode, the script will check whether the file(s) of [language]
exist or not, and will optionally download them (when option -k is used).  

The files that can be checked / downloaded are:
 - the program's po file (language dependant) - default
 - the program's pot file (option -t)
 - the program's documentation file (option -d)
 - all of the above files (option -a)
 - extra files (option -e), including all of the above plus the
   docmessages/ po and pot files

This mode will (hopefully) be useful to l10n team coordinators and such.

Feel free to contribute to this file, or contact me directly if you don't
have a KDE SVN account.

Spiros Georgaras <sng@hellug.gr>
"
}

#########################################################################################
#
#                                   Script starts here
#
#########################################################################################
BRANCH=trunk

while getopts ":vchsp:m:l:kaetd" opt; do
  case $opt in
  s)
    BRANCH="branches/stable"
    ;;
  p)
    PROGRAM="$OPTARG"
    ;;
  m)
    MODULE="$OPTARG"
    ;;
	l)
	  LANGUAGE="$OPTARG"
		DOWNLOAD_PO=1
		;;
	k)
	  KEEP_DOWNLOAD=1
		;;
	a)
		DOWNLOAD_ALL=1
		;;
	e)
	  DOWNLOAD_ALL=1
		DOWNLOAD_EXTRA=1
		;;
	t)
	  DOWNLOAD_TEMPLATE=1
		unset DOWNLOAD_PO
		;;
  d)
	  DOWNLOAD_DOC=1
		unset DOWNLOAD_PO
	  ;;
  h)
    version
    usage
    helpsc
    exit 0
    ;;
	c)
	  version
		credit
		exit 0
		;;
  v)
    version
    exit 0
    ;;
  \?)
    version
    usage
    exit 1
    ;;
  esac
done 2>/dev/null

SVN=svn://anonsvn.kde.org/home/kde/"$BRANCH"/l10n-kde4
SVN3=svn://anonsvn.kde.org/home/kde/"$BRANCH"/l10n-kde3
POT=templates/messages/"$MODULE"
PO=messages/"$MODULE"
DOC=docs/"$MODULE"/"$PROGRAM"
PO_DOC=docmessages/"$MODULE"
POT_DOC=templates/docmessages/"$MODULE"

if [ -z "$MODULE" ] || [ -z "$PROGRAM" ];then
  usage
  exit 1
fi

if [ -n "$LANGUAGE" ];then
  langExists
  if [ $? -eq 0 ];then
		echo "  ERROR: Language \"$LANGUAGE\" does not exist in $(echo $BRANCH | sed 's|branches/||')"
		exit 1
	fi

  if [ -n "$DOWNLOAD_ALL" ];then
    DOWNLOAD_PO=1
		DOWNLOAD_TEMPLATE=1
		DOWNLOAD_DOC=1
	fi

  if [ -n "$DOWNLOAD_TEMPLATE" ];then
	  FILE_ONLY="$PROGRAM".pot
    FILE_TO_DOWNLOAD="$SVN"/"$POT"/"$PROGRAM".pot
		FILE_TO_SAVE="$PROGRAM"-"$LANGUAGE".pot
		checkFile
  fi
  if [ -n "$DOWNLOAD_PO" ];then
	  FILE_ONLY="$PROGRAM".po
    FILE_TO_DOWNLOAD="$SVN"/"$LANGUAGE"/"$PO"/"$PROGRAM".po
		FILE_TO_SAVE="$PROGRAM"-"$LANGUAGE".po
		checkFile
  fi
	if [ -n "DOWNLOAD_EXTRA" ];then
    echo '<-- Documentation files'

	  FILE_ONLY="$PROGRAM".pot
    FILE_TO_DOWNLOAD="$SVN"/"$POT_DOC"/"$PROGRAM".pot
		FILE_TO_SAVE="$PROGRAM"-doc-"$LANGUAGE".pot
		checkFile

	  FILE_ONLY="$PROGRAM".po
    FILE_TO_DOWNLOAD="$SVN"/"$LANGUAGE"/"$PO_DOC"/"$PROGRAM".po
		FILE_TO_SAVE="$PROGRAM"-doc-"$LANGUAGE".po
		checkFile
	fi
  if [ -n "$DOWNLOAD_DOC" ];then
	  FILE_ONLY=index.docbook
    FILE_TO_DOWNLOAD="$SVN"/"$LANGUAGE"/"$DOC"/index.docbook
    FILE_TO_SAVE="$PROGRAM"-"$LANGUAGE"-index.docbook
		checkFile
	fi

else

  rm -rf "$PROGRAM"-from-svn 2>/dev/null
  mkdir "$PROGRAM"-from-svn || {
  echo "  ERROR: Cannot create directory"
  exit 1
  }
  cd "$PROGRAM"-from-svn
  
  mkdir po
  cd po
  svn cat "$SVN"/"$POT"/"$PROGRAM".pot > "$PROGRAM".pot 2>/dev/null || {
    echo "  Error: $PROGRAM.pot does not exist upstream"
    rm "$PROGRAM".pot 2>/dev/null
    exit 1
  }
  ALL=0
  PO_FOUND=0
  echo "Fetching translations for $PROGRAM"
  for PO_LANGUAGE in `svn cat "$SVN"/subdirs`
  do
    echo -n "  Fetching "$PO_LANGUAGE"...   "
    svn cat "$SVN"/"$PO_LANGUAGE"/"$PO"/"$PROGRAM".po > "$PO_LANGUAGE".po 2>/dev/null
    if test -s "$PO_LANGUAGE".po
    then
      ((PO_FOUND++))
      echo ' ok'
    else
      rm "$PO_LANGUAGE".po
      echo nok
    fi
    ((ALL++))
  done
  
  if [ "$PO_FOUND" = "0" ]
  then
    cd ..
    rm -rf po
    exit
  fi
  
  echo "Fetching documentation for $PROGRAM"
  mkdir doc
  DOC_FOUND=0
  for n in *.po;do
    PO_LANGUAGE=`echo "$n" | sed 's|.po$||'`
    echo -n "  Fetching "$PO_LANGUAGE"...   "
    svn cat  "$SVN"/"$PO_LANGUAGE"/"$DOC"/index.docbook > doc/"$PO_LANGUAGE"-index.docbook 2>/dev/null
    if test -s doc/"$PO_LANGUAGE"-index.docbook
    then
      ((DOC_FOUND++))
      mkdir doc/"$PO_LANGUAGE"
      mv doc/"$PO_LANGUAGE"-index.docbook doc/"$PO_LANGUAGE"/index.docbook
      echo ' ok'
    else
      rm doc/"$PO_LANGUAGE"-index.docbook
      echo nok
    fi
  done
  
  if [ "$DOC_FOUND" != "0" ]
  then
    mv doc ..
  fi

  echo "

$PROGRAM is translated in $PO_FOUND of $ALL languages
and has documentation for $DOC_FOUND of them..."

fi
