#!/usr/bin/perl
# Plugin to kdesvn-build to setup needed software not installed on coverity test machines.
#
# Please also see the documentation that should be included with this program,
# from the kdesdk/doc/scripts/kdesvn-build directory.
#
# Copyright © 2003 - 2006 Michael Pyne. <michael.pyne@kdemail.net>
# Home page: http://kdesvn-build.kde.org/
#
# Copyright © 2006 Dirk Mueller <dirk@kde.org>
#
# You may use, alter, and redistribute this software under the terms
# of the GNU General Public License, v2 (or any later version).


# This subroutine checks if an appropriate dbus software is already installed.
# Currently this means DBUS 0.62. 
#
# Return value is true if DBUS is installed, 0 otherwise.

sub check_dbus_installed()
{
    my $minVersion = '0.62';

    my $result = system('pkg-config', '--exists', 'dbus-1', '>=', $minVersion);

    return ($result >> 8) == 0;
}

# This subroutine downloads DBUS if necessary, and builds and installs it (all
# in one step: there is no separate update then install).
#
# It installs to the prefix given by the kdedir setting by default.
#
# This is normally only used for Coverity, as people should be installing
# dependency libraries using their distribution's package manager software, not
# kdesvn-build.
#
# Nothing happens in pretend mode however.
#
# Return value: 0 if the download/build/install failed, non-zero otherwise.
sub download_install_dbus()
{
    return 1 if pretending;

    note "\n<<<  Updating D-BUS  >>>\n";

    my $dbus_version = '0.62';
    my $filename = "dbus-$dbus_version.tar.gz";
    my $dbus_url = "http://dbus.freedesktop.org/releases/$filename";

    my $tempdir = get_build_dir('dbus');
    super_mkdir($tempdir) || die "could no create $tempdir";
    
    p_chdir($tempdir);
    pretend "Downloading DBUS to $tempdir/$filename";

    # Download snapshot.
    info "\tDownloading DBUS tarball.";

    if (not download_file($dbus_url, $filename))
    {
        error "Unable to download D-BUS from r[$dbus_url]";
        return 0;
    }

    # Decompress.
    my $result = log_command('dbus', 'untar', ['tar', 'xzf', $filename]);
    if ($result != 0)
    {
        error "Unable to decompress D-BUS tarball.";
        return 0;
    }

    my $prefix = get_option('global', 'kdedir');

    p_chdir("dbus-$dbus_version");
    info "\tBuilding DBUS";
    $result = log_command('dbus', 'configure', ['./configure',
                             "--prefix=$prefix", '--disable-qt',
                             '--disable-qt3', '--disable-dependency-tracking',
                             '--disable-xml-docs', '--disable-doxygen-docs',
                             '--disable-glib', '--disable-mono', '--disable-python',
                             '--disable-gcj' ]
                             );

    if ($result != 0)
    {
        error "Unable to configure D-BUS.";
        return 0;
    }

    $result = log_command('dbus', 'make', ['make']); 
    if ($result != 0)
    {
        error "Unable to build D-BUS.";
        return 0;
    }

    info "\tInstalling DBUS (installing to $prefix)";
    $result = log_command('dbus', 'make-install', ['make', 'install']);
    if ($result != 0)
    {
        error "Unable to install D-BUS.  (make-install-prefix is ignored).";
        return 0;
    }

    p_chdir (get_kdesvn_dir());
    prune_under_directory($tempdir);

    return 1;
}

# This subroutine checks if an appropriate dbus software is already installed.
# Currently this means DBUS 0.62. 
#
# Return value is true if DBUS is installed, 0 otherwise.

sub check_cmake_installed()
{
    my $minVersion = '2.4-patch 3';

    my $result = `cmake --version`;

    return ($result =~ $minVersion);
}

# This subroutine downloads CMake if necessary, builds and installs it (all
# in one step: there is no separate update then install).
#
# It installs to the prefix given by the kdedir setting by default.
#
# This is normally only used for Coverity, as people should be installing
# dependency libraries using their distribution's package manager software, not
# kdesvn-build.
#
# Nothing happens in pretend mode however.
#
# Return value: 0 if the download/build/install failed, non-zero otherwise.
sub download_install_cmake()
{
    return 1 if pretending;

    note "\n<<<  Downloading CMake  >>>\n";

    my $cmake_version = '2.4.3';
    my $filename = "cmake-$cmake_version.tar.gz";
    my $cmake_url = "http://www.cmake.org/files/v2.4/$filename";

    my $tempdir = get_build_dir('cmake');
    super_mkdir($tempdir) || die "could no create $tempdir";

    p_chdir($tempdir);
    pretend "Downloading CMAKE to $tempdir/$filename";

    # Download snapshot.
    info "\tDownloading CMAKE tarball.";

    if (not download_file($cmake_url, $filename))
    {
        error "Unable to download D-BUS from r[$cmake_url]";
        return 0;
    }

    # Decompress.
    my $result = log_command('cmake', 'untar', ['tar', 'xzf', $filename]);
    if ($result != 0)
    {
        error "Unable to decompress D-BUS tarball.";
        return 0;
    }

    my $prefix = get_option('global', 'kdedir');

    p_chdir("cmake-$cmake_version");
    info "\tBuilding CMAKE";
    $result = log_command('cmake', 'configure', ['./configure',
						 "--prefix=$prefix" ] );

    if ($result != 0)
    {
        error "Unable to configure CMAKE.";
        return 0;
    }

    $result = log_command('cmake', 'make', ['make']); 
    if ($result != 0)
    {
        error "Unable to build D-BUS.";
        return 0;
    }

    info "\tInstalling CMAKE (installing to $prefix)";
    $result = log_command('cmake', 'make-install', ['make', 'install']);
    if ($result != 0)
    {
        error "Unable to install D-BUS.  (make-install-prefix is ignored).";
        return 0;
    }

    p_chdir (get_kdesvn_dir());
    prune_under_directory($tempdir);

    return 1;
}



# This subroutine is run after the lock has been obtained, but before performing
# any updates or builds.  Do any steps that need to be done only in the case of
# being run by Coverity.  This subroutine is only called if the COVERITY_RUN
# environment variable is set.
#
# No return value.
sub perform_coverity_checks()
{
    info "We are being run by g[Coverity].  Hi guys!";

    unless (check_dbus_installed())
    {
        info "D-BUS does not appear to be installed.  At least, pkg-config can't find it.";
        info "So just for you guys, I'll go ahead and install it for you.";

        if (not download_install_dbus())
        {
            error "\nWell, we were b[r[unable to install] DBUS for some reason.";
            error "Check your logs afterwards.";
        }
    }
    else 
    {
        info "D-BUS appears to be installed in the following path: ";
        system("pkg-config", "--variable=prefix", "dbus-1");
    }

    unless (check_cmake_installed())
    {
        info "CMake 2.4.3 does not appear to be installed.  At least its not in \$PATH";
        info "So just for you guys, I'll go ahead and install it for you.";

        if (not download_install_cmake())
        {
            error "\nWell, we were b[r[unable to install] CMake for some reason.";
            error "Check your logs afterwards.";
        }
    }

    # Print blank line.
    info "";
}

sub plugin_finish($)
{
    my ($logdir) = @_;
    my $today = basename($logdir);
    my $hostname = hostname();

    info "Uploading logfiles\n";

    system("svn", "import", "-m", $today,
           $logdir, "svn://anonsvn.kde.org/home/coverity_kde/$today/$hostname") 
       if($hostname =~ /coverity/i);
}

sub plugin_setup_default_modules()
{
    foreach my $pack qw(kdevelop kdewebdev kdeaccessibility koffice kdesdk) 
    {
	push($@update_list, $pack);
	push($@build_list, $pack);
        if (not exists $package_opts{$i})
        {
            $package_opts{$i} = { }; # Set up defaults
            $package_opts{$i}{'set-env'} = { };
        }

    }

    $package_opts{'qt-copy'} = {
        'configure-flags' => '-qt-gif -system-zlib -no-exceptions -fast -release',
        'apply-qt-patches' => 1,
        'use-unsermake' => 0,
        'install-after-build' => 0,
        'set-env' => { },
        'make-options' => 'sub-src sub-tools'
    }
}

sub plugin_update_module_path($)
{
    my ($module) = @_;
    my @revert_args = ('svn', 'revert', '-R', '.');
    #run_svn($module, 'svn-revert', \@revert_args);
}

sub plugin_check_module_validity($$$)
{
    my ($module, $module_actual_url, $module_expected_url) = @_;

    if ($module_actual_url ne $module_expected_url)
    {
        warning "Something is wrong with your $module. Let's see if we can correct it. ";
        warning "kdesvn-build expects:        y[$module_expected_url]";
        warning "The module is actually from: y[$module_actual_url]";

        system("svn status --no-ignore | grep '^[I?]' | cut -b8- | xargs rm -rf");
        system("svn", "switch", $module_expected_url);
        return;
    }
}

perform_coverity_checks();
