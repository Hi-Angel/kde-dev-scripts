#!/bin/bash
################################################################################
# Compiles a KDE2 snapshot.                                                    #
# 2000 by Frerich Raabe <raabe@kde.org>                                        #
################################################################################

# Where are your KDE sources?
SRCDIR=/home/devel/src/kde-cvs

# Where shall I put the binaries?
KDE2DIR=/opt/kde2

# Where is your Qt 2.2.0?
QTDIR=/usr/local/lib/qt

# If you would like logfiles of the compilation process, specify a directory
# here in which the logfiles will be saved. If you want to disable logfile
# generation, leave this blank.
LOGDIR=$SRCDIR/log

# Add modules you want to get compiled to this space-seperated list. Please
# note that the modules kde-qt-addon, kdesuppor, kdelibs, and kdebase
# (if you want a KDE2 desktop and not just develope applications for it)
# must be compiled in exactly that order. Any other modules are optional.
MODULES="kde-qt-addon kdesupport kdelibs kdebase"

# Do you want a clean install? This is recommended but please note that
# you cannot use your previous KDE2 desktop while the compilation is
# running. Set this to "no" to install the new snapshot over the previous
# one, otherwise set it to "yes".
INSTALLFROMSCRATCH=yes

## Don't modify anything below this line! ######################################

# Various variables for internal usage
#
STR_OKAY="done!"
STR_ERROR="failed!\012\015"
ERR_NO_ERROR=0
ERR_CHANGE_INTO_MOD_DIR=1
ERR_NO_MAKEFILE_IN=2
ERR_CONFIGURE_FAIL=3
ERR_COMPILE_FAIL=4
ERR_INSTALL_FAIL=5
ERR_INV_SRCDIR=6
ERR_INV_QTDIR=7
CRITICAL_MODULES="kde-qt-addon kdesupport kdelibs kdebase"
DATE=`date +%Y%m%d`

# Various checks to ensure that valid data has been specified, creates the
# directory for the logfile in case it doesn't exist already.
#
if test -n "$LOGDIR" -a ! -d "$LOGDIR"; then
  if ! mkdir -p "$LOGDIR" &> /dev/null; then
    echo "WARNING: Could not create logfile-directory."
    echo "WARNING: Logfile generation deactivated."
    LOGDIR=""
  fi
else
  if test -n "$LOGDIR" -a ! -w "$LOGDIR"; then
    echo "WARNING: Could not obtain write access to specified logfile-directory."
    echo "WARNING: Logfile generation deactivated."
    LOGDIR=""
  fi
fi
test $LOGDIR && STR_ERROR="$STR_ERRORCheck the logfile in $LOGDIR for further info."
if test ! -d "$SRCDIR"; then
  echo "ERROR: Invalid source directory specified!"; exit $ERR_INV_SRCDIR
fi
if test ! -d "$QTDIR"; then
  echo "ERROR: Invalid Qt directory specified!"; exit $ERR_INV_QTDIR
fi

# Clean the installation directory if selected.
#
if test "$INSTALLFROMSCRATCH" = yes; then
  if test ! -w $KDEDIR; then
    echo "Enter the root password to clean the installation directory."
    echo -n ""
    su -c"rm -rf $KDE2DIR/*"
  else
    rm -rf $KDE2DIR/*
  fi
fi

# Start installing the modules.
#
for MODULE in $MODULES; do
  if ! cd $SRCDIR/$MODULE; then
    if echo $CRITICAL_MODULES | grep -q $MODULE; then
      echo "ERROR: Could not change into directory $SRCDIR/$MODULE!"
      exit $ERR_CHANGE_INTO_MOD_DIR
    else
      echo "WARNING: Could not change into directory $SRCDIR/$MODULE."
      echo "WARNING: Skipping module $MODULE."
    fi
  else
    cd $SRCDIR/$MODULE

    # Check whether 'make -f Makefile.cvs' has been called.
    #
    if test ! -e Makefile.in; then
      if echo $CRITICAL_MODULES | grep -q $MODULE; then
        echo "ERROR: Please execute 'make -f Makefile.cvs' first for this module!"
        exit $ERR_NO_MAKEFILE_IN
      else
        echo "WARNING: 'make -f Makefile.cvs' seems not to be executed for this"
        echo "WARNING: module, skipping compilation."
      fi
    else
      echo "Building module: $MODULE"

      # Configure the module.
      #
      echo -n "  Configuring..."
      CONFIGURE="configure --enable-debug --prefix=$KDE2DIR --with-qt-libs=$QTDIR"
      test $LOGDIR && CONFIGURE="$CONFIGURE &> $LOGDIR/$MODULE-configure-$DATE"

      if eval "$CONFIGURE"; then
        echo -e $STR_OKAY

        # Compile the module.
        #
        echo -n "  Compiling..."
        MAKE="make"
        echo $CRITICAL_MODULES | grep -q $MODULE || MAKE="$MAKE -k"
        test $LOGDIR && MAKE="$MAKE &> $LOGDIR/$MODULE-build-$DATE"

        if eval "$MAKE"; then
          echo -e $STR_OKAY

          # Install the module.
          #
          MAKE_INSTALL="make install"
          test $LOGDIR && MAKE_INSTALL="$MAKE_INSTALL &> $LOGDIR/$MODULE-install-$DATE"

          if test ! -w $KDE2DIR; then
            echo "  Please enter the root password to install module $MODULE."
            echo -n "  "
            su -c"echo -n '  Installing...';
            if eval $MAKE_INSTALL; then
              echo -e $STR_OKAY;
              echo Module $MODULE successfully installed in $KDE2DIR!;
            else
              echo -e $STR_ERROR;
              echo $CRITICAL_MODULES | grep -q $MODULE && exit $ERR_INSTALL_FAIL;
            fi"
          else
            echo -n "  Installing..."
            if eval "$MAKE_INSTALL"; then
              echo -e $STR_OKAY
              echo "Module $MODULE successfully installed in $KDE2DIR!"
            else
              echo -e $STR_ERROR
              echo $CRITICAL_MODULES | grep -q $MODULE && exit $ERR_INSTALL_FAIL
            fi
          fi
        else
          echo -e $STR_ERROR
          echo $CRITICAL_MODULES | grep -q $MODULE && exit $ERR_COMPILE_FAIL
        fi
      else
        echo -e $STR_ERROR
        exit $ERR_CONFIGURE_FAIL
      fi
    fi
  fi
done

exit $ERR_NO_ERROR